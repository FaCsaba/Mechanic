@page "/commissions"
@using MechanicFE.Exceptions
@using MechanicFE.Services

@inject HttpClient HttpClient
@inject ICommissionService CommissionService 
@inject IClientService ClientService

<h3>Commissions</h3>

<QuickGrid Items="@_commissions">
    <PropertyColumn Title="Client's Name" Property="@(c => c.Client.Name)" Sortable="true"/>
    <PropertyColumn Title="License Plate Number" Property="@(c => c.LicensePlateNumber)" Sortable="true"/>
    <PropertyColumn Title="Manufactured at" Property="@(c => c.VehicleManufacturingDate)" Sortable="true"/>
    <PropertyColumn Title="Fault" Property="@(c => c.FaultCategory)" Sortable="true"/>
    <PropertyColumn Title="Severity" Property="@(c => c.Severity)" Sortable="true"/>
    <PropertyColumn Title="Status" Property="@(c => c.Status)" Sortable="true"/>
    <PropertyColumn Title="Estimate (h.)" Property="@(c => c.WorkHourEstimate)" Sortable="true"/>
    <PropertyColumn Title="Description" Property="@(c => c.Description)" Sortable="true"/>

    <TemplateColumn Title="Actions">
        <button class="btn btn-primary" @onclick="@(() => OfferForUpdate(context))">Update</button>
        <button class="btn btn-danger" @onclick="@(() => DeleteCommission(context.Id))">Delete</button>
    </TemplateColumn>
</QuickGrid>
<br/>
<div class="container">
    <h4>Create Commission</h4>
    <EditForm Model=@_createCommission OnSubmit="@CreateCommission">
        <div class="form-group">
            <label>Client</label>
            <InputSelect class="form-control" @bind-Value="_createCommission.ClientId">
                <option></option>
                @foreach (var client in _clients)
                {
                    <option value="@client.Id">@client.Name</option>
                }
            </InputSelect>
            @foreach (var error in _createCommissionValidationFailures.ExtractErrors("ClientId"))
            {
                <p class="text-danger">@error</p>
            }
        </div>
        <div class="form-group">
            <label>License Plate Number</label>
            <InputText class="form-control" @bind-Value="_createCommission.LicensePlateNumber"/>
            @foreach (var error in _createCommissionValidationFailures.ExtractErrors("LicensePlateNumber"))
            {
                <p class="text-danger">@error</p>
            }
        </div>
        <div class="form-group">
            <label>Manufacturing at</label>
            <InputDate class="form-control" @bind-Value="_createCommission.VehicleManufacturingDate"/>
            @foreach (var error in _createCommissionValidationFailures.ExtractErrors("VehicleManufacturingDate"))
            {
                <p class="text-danger">@error</p>
            }
        </div>
        <div class="form-group">
            <label>Fault</label>
            <InputSelect class="form-control" @bind-Value="_createCommission.FaultCategory">
                <option value="@FaultCategory.Bodywork">BodyWork</option>
                <option value="@FaultCategory.Motor">Motor</option>
                <option value="@FaultCategory.RunningGear">RunningGear</option>
                <option value="@FaultCategory.Brake">Brake</option>
            </InputSelect>
            @foreach (var error in _createCommissionValidationFailures.ExtractErrors("FaultCategory"))
            {
                <p class="text-danger">@error</p>
            }
        </div>
        <div class="form-group">
            <label>Severity</label>
            <InputNumber class="form-control" @bind-Value="_createCommission.Severity" min="0" max="10"/>
            @foreach (var error in _createCommissionValidationFailures.ExtractErrors("Severity"))
            {
                <p class="text-danger">@error</p>
            }
        </div>
        <div class="form-group">
            <label>Description</label>
            <InputText class="form-control" @bind-Value="_createCommission.Description"/>
            @foreach (var error in _createCommissionValidationFailures.ExtractErrors("Description"))
            {
                <p class="text-danger">@error</p>
            }
        </div>
        <div class="form-group">
            <input type="submit" value="Create" class="btn btn-primary"/>
        </div>
    </EditForm>
    <br/>

    @if (_updateCommission is not null)
    {
        <h4>Update Commission</h4>
        <EditForm Model="@_updateCommission" OnSubmit="@UpdateCommission">
            <div class="form-group">
                <label>Client</label>
                <InputSelect class="form-control" @bind-Value="_updateCommission.ClientId">
                    <option></option>
                    @foreach (var client in _clients)
                    {
                        <option value="@client.Id">@client.Name</option>
                    }
                </InputSelect>
                @foreach (var error in _updateCommissionValidationFailures.ExtractErrors("ClientId"))
                {
                    <p class="text-danger">@error</p>
                }
            </div>
            <div class="form-group">
                <label>License Plate Number</label>
                <InputText class="form-control" @bind-Value="_updateCommission.LicensePlateNumber"/>
                @foreach (var error in _updateCommissionValidationFailures.ExtractErrors("LicensePlateNumber"))
                {
                    <p class="text-danger">@error</p>
                }
            </div>
            <div class="form-group">
                <label>Manufacturing at</label>
                <InputDate class="form-control" @bind-Value="_updateCommission.VehicleManufacturingDate"/>
                @foreach (var error in _updateCommissionValidationFailures.ExtractErrors("VehicleManufacturingDate"))
                {
                    <p class="text-danger">@error</p>
                }
            </div>
            <div class="form-group">
                <label>Fault</label>
                <InputSelect class="form-control" @bind-Value="_updateCommission.FaultCategory">
                    <option value="@FaultCategory.Bodywork">BodyWork</option>
                    <option value="@FaultCategory.Motor">Motor</option>
                    <option value="@FaultCategory.RunningGear">RunningGear</option>
                    <option value="@FaultCategory.Brake">Brake</option>
                </InputSelect>
                @foreach (var error in _updateCommissionValidationFailures.ExtractErrors("FaultCategory"))
                {
                    <p class="text-danger">@error</p>
                }
            </div>
            <div class="form-group">
                <label>Severity</label>
                <InputNumber class="form-control" @bind-Value="_updateCommission.Severity" min="0" max="10"/>
                @foreach (var error in _updateCommissionValidationFailures.ExtractErrors("Severity"))
                {
                    <p class="text-danger">@error</p>
                }
            </div>
            <div class="form-group">
                <label>Status</label>
                <InputSelect class="form-control" @bind-Value="_updateCommission.Status">
                    <option value="@CommissionStatus.Todo">Todo</option>
                    <option value="@CommissionStatus.Doing">Doing</option>
                    <option value="@CommissionStatus.Done">Done</option>
                </InputSelect>
                @foreach (var error in _updateCommissionValidationFailures.ExtractErrors("Status"))
                {
                    <p class="text-danger">@error</p>
                }
            </div>
            <div class="form-group">
                <label>Description</label>
                <InputText class="form-control" @bind-Value="_updateCommission.Description"/>
                @foreach (var error in _updateCommissionValidationFailures.ExtractErrors("Description"))
                {
                    <p class="text-danger">@error</p>
                }
            </div>
            <div class="form-group">
                <input type="submit" value="Update" class="btn btn-primary"/>
            </div>
        </EditForm>
    }
</div>

@code {
    IQueryable<CommissionDto> _commissions = new List<CommissionDto>().AsQueryable();
    IQueryable<Client> _clients = new List<Client>().AsQueryable();
    CreateCommission _createCommission = new();
    UpdateCommission? _updateCommission;
    List<ValidationFailure> _createCommissionValidationFailures = [];
    List<ValidationFailure> _updateCommissionValidationFailures = [];

    private async Task GetCommissions()
    {
        _commissions = await CommissionService.GetCommissions();
    }

    private async Task GetClients()
    {
        _clients = await ClientService.GetClients();
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(GetCommissions(), GetClients());
    }

    private async Task DeleteCommission(Guid id)
    {
        await CommissionService.DeleteCommission(id);
        await GetCommissions();
    }

    private async Task CreateCommission()
    {
        try
        {
            await CommissionService.CreateCommission(_createCommission);
            await GetCommissions();
            _createCommission = new CreateCommission();
            _createCommissionValidationFailures = [];
        }
        catch (ValidationErrorException e)
        {
            _createCommissionValidationFailures = e.ValidationFailures;
        }
    }

    private void OfferForUpdate(CommissionDto commissionDto)
    {
        _updateCommission = new UpdateCommission
        {
            Id = commissionDto.Id,
            ClientId = commissionDto.Client.Id,
            Description = commissionDto.Description ?? "",
            FaultCategory = commissionDto.FaultCategory,
            Severity = commissionDto.Severity,
            Status = commissionDto.Status,
            LicensePlateNumber = commissionDto.LicensePlateNumber,
            VehicleManufacturingDate = commissionDto.VehicleManufacturingDate
        };
    }

    private async Task UpdateCommission()
    {
        try
        {
            if (_updateCommission is null) return;
            await CommissionService.UpdateCommission(_updateCommission);
            await GetCommissions();
            _updateCommission = null;
        }
        catch (ValidationErrorException e)
        {
            _updateCommissionValidationFailures = e.ValidationFailures;
        }
    }
}